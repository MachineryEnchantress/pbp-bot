
test_motorkit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00000db6  00000e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024e  0080019e  0080019e  00000ee8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008009  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a32  00000000  00000000  0000923d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ad0  00000000  00000000  0000ac6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000085c  00000000  00000000  0000c740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000216b  00000000  00000000  0000cf9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f71  00000000  00000000  0000f107  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00012078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	47 c0       	rjmp	.+142    	; 0x90 <__ctors_end>
   2:	6b c0       	rjmp	.+214    	; 0xda <__bad_interrupt>
   4:	6a c0       	rjmp	.+212    	; 0xda <__bad_interrupt>
   6:	69 c0       	rjmp	.+210    	; 0xda <__bad_interrupt>
   8:	68 c0       	rjmp	.+208    	; 0xda <__bad_interrupt>
   a:	67 c0       	rjmp	.+206    	; 0xda <__bad_interrupt>
   c:	66 c0       	rjmp	.+204    	; 0xda <__bad_interrupt>
   e:	65 c0       	rjmp	.+202    	; 0xda <__bad_interrupt>
  10:	64 c0       	rjmp	.+200    	; 0xda <__bad_interrupt>
  12:	63 c0       	rjmp	.+198    	; 0xda <__bad_interrupt>
  14:	62 c0       	rjmp	.+196    	; 0xda <__bad_interrupt>
  16:	61 c0       	rjmp	.+194    	; 0xda <__bad_interrupt>
  18:	60 c0       	rjmp	.+192    	; 0xda <__bad_interrupt>
  1a:	5f c0       	rjmp	.+190    	; 0xda <__bad_interrupt>
  1c:	5e c0       	rjmp	.+188    	; 0xda <__bad_interrupt>
  1e:	5d c0       	rjmp	.+186    	; 0xda <__bad_interrupt>
  20:	15 c4       	rjmp	.+2090   	; 0x84c <__vector_16>
  22:	5b c0       	rjmp	.+182    	; 0xda <__bad_interrupt>
  24:	d0 c2       	rjmp	.+1440   	; 0x5c6 <__vector_18>
  26:	01 c3       	rjmp	.+1538   	; 0x62a <__vector_19>
  28:	58 c0       	rjmp	.+176    	; 0xda <__bad_interrupt>
  2a:	57 c0       	rjmp	.+174    	; 0xda <__bad_interrupt>
  2c:	56 c0       	rjmp	.+172    	; 0xda <__bad_interrupt>
  2e:	55 c0       	rjmp	.+170    	; 0xda <__bad_interrupt>
  30:	54 c0       	rjmp	.+168    	; 0xda <__bad_interrupt>
  32:	53 c0       	rjmp	.+166    	; 0xda <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	00 00       	nop
  36:	00 08       	sbc	r0, r0
  38:	00 02       	muls	r16, r16
  3a:	01 00       	.word	0x0001	; ????
  3c:	00 03       	mulsu	r16, r16
  3e:	04 07       	cpc	r16, r20
	...

00000048 <digital_pin_to_bit_mask_PGM>:
  48:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  58:	04 08 10 20                                         ... 

0000005c <digital_pin_to_port_PGM>:
  5c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  6c:	03 03 03 03                                         ....

00000070 <port_to_input_PGM>:
  70:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000007a <port_to_output_PGM>:
  7a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000084 <port_to_mode_PGM>:
  84:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000008e <__ctors_start>:
  8e:	43 03       	mulsu	r20, r19

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	d4 e0       	ldi	r29, 0x04	; 4
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
  9c:	11 e0       	ldi	r17, 0x01	; 1
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	e6 eb       	ldi	r30, 0xB6	; 182
  a4:	fd e0       	ldi	r31, 0x0D	; 13
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 39       	cpi	r26, 0x9E	; 158
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	ae e9       	ldi	r26, 0x9E	; 158
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 3e       	cpi	r26, 0xEC	; 236
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <__do_global_ctors>:
  c2:	10 e0       	ldi	r17, 0x00	; 0
  c4:	c8 e4       	ldi	r28, 0x48	; 72
  c6:	d0 e0       	ldi	r29, 0x00	; 0
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <__do_global_ctors+0xe>
  ca:	21 97       	sbiw	r28, 0x01	; 1
  cc:	fe 01       	movw	r30, r28
  ce:	6b d6       	rcall	.+3286   	; 0xda6 <__tablejump2__>
  d0:	c7 34       	cpi	r28, 0x47	; 71
  d2:	d1 07       	cpc	r29, r17
  d4:	d1 f7       	brne	.-12     	; 0xca <__do_global_ctors+0x8>
  d6:	05 d3       	rcall	.+1546   	; 0x6e2 <main>
  d8:	6c c6       	rjmp	.+3288   	; 0xdb2 <_exit>

000000da <__bad_interrupt>:
  da:	92 cf       	rjmp	.-220    	; 0x0 <__vectors>

000000dc <_Z9led_onoffb.part.0>:
#define LED_ON 1

void led_onoff(bool bOn)
{
  if(bOn)
    digitalWrite(pin_indicator, LOW);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	11 c5       	rjmp	.+2594   	; 0xb04 <digitalWrite>

000000e2 <_Z9led_onoffb>:
#define LED_OFF 0
#define LED_ON 1

void led_onoff(bool bOn)
{
  if(bOn)
  e2:	81 11       	cpse	r24, r1
  e4:	fb cf       	rjmp	.-10     	; 0xdc <_Z9led_onoffb.part.0>
    digitalWrite(pin_indicator, LOW);
  else
    digitalWrite(pin_indicator, HIGH);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	80 e1       	ldi	r24, 0x10	; 16
  ea:	0c c5       	rjmp	.+2584   	; 0xb04 <digitalWrite>

000000ec <setup>:
}

void setup() {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	c8 e0       	ldi	r28, 0x08	; 8
  f2:	d1 e0       	ldi	r29, 0x01	; 1
//  Serial.begin(115200);
//  Serial.println("Start");
  // put your setup code here, to run once:
  for(uint8_t i = 0; i < KEY_CNT; i++)
  {
    pinMode(pin_keys[i], INPUT_PULLUP);
  f4:	62 e0       	ldi	r22, 0x02	; 2
  f6:	89 91       	ld	r24, Y+
  f8:	c9 d4       	rcall	.+2450   	; 0xa8c <pinMode>

void setup() {
//  Serial.begin(115200);
//  Serial.println("Start");
  // put your setup code here, to run once:
  for(uint8_t i = 0; i < KEY_CNT; i++)
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	cc 30       	cpi	r28, 0x0C	; 12
  fe:	d8 07       	cpc	r29, r24
 100:	c9 f7       	brne	.-14     	; 0xf4 <setup+0x8>
  {
    pinMode(pin_keys[i], INPUT_PULLUP);
  }
  pinMode(pin_motor_left, OUTPUT);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	89 e0       	ldi	r24, 0x09	; 9
 106:	c2 d4       	rcall	.+2436   	; 0xa8c <pinMode>
  pinMode(pin_motor_right, OUTPUT);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	8a e0       	ldi	r24, 0x0A	; 10
 10c:	bf d4       	rcall	.+2430   	; 0xa8c <pinMode>
  pinMode(pin_indicator, OUTPUT);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	80 e1       	ldi	r24, 0x10	; 16
 112:	bc d4       	rcall	.+2424   	; 0xa8c <pinMode>
  
  digitalWrite(pin_motor_right, HIGH);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	f5 d4       	rcall	.+2538   	; 0xb04 <digitalWrite>
  digitalWrite(pin_motor_left, HIGH);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	89 e0       	ldi	r24, 0x09	; 9
 11e:	f2 d4       	rcall	.+2532   	; 0xb04 <digitalWrite>
  
  led_onoff(LED_ON);
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	db cf       	rjmp	.-74     	; 0xdc <_Z9led_onoffb.part.0>

00000126 <_Z8key_procv>:
  _k_event = 0;
  delayMicroseconds(1000 + tm - micros());
}

uint8_t key_proc()
{
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
  static uint32_t pressing_cnt = 0;
  static bool _enter_pressed = false;
  
  uint8_t ret = 0;
  static uint8_t tm_cnt = 0;
  if(tm_cnt++ < 10)
 134:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZZ8key_procvE6tm_cnt>
 138:	8a 30       	cpi	r24, 0x0A	; 10
 13a:	28 f4       	brcc	.+10     	; 0x146 <_Z8key_procv+0x20>
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_ZZ8key_procvE6tm_cnt>
  {
    return ret;
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	7a c0       	rjmp	.+244    	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
  }else
  {
    tm_cnt = 0;
 146:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <_ZZ8key_procvE6tm_cnt>
 14a:	88 e0       	ldi	r24, 0x08	; 8
 14c:	c8 2e       	mov	r12, r24
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	d8 2e       	mov	r13, r24
 152:	94 e0       	ldi	r25, 0x04	; 4
 154:	e9 2e       	mov	r14, r25
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	f9 2e       	mov	r15, r25
 15a:	00 e0       	ldi	r16, 0x00	; 0
 15c:	11 e0       	ldi	r17, 0x01	; 1
  }
  for(uint8_t i = 0; i < KEY_CNT; i++)
 15e:	c0 e0       	ldi	r28, 0x00	; 0
  {
    key_state[i] = digitalRead(pin_keys[i]);
 160:	f6 01       	movw	r30, r12
 162:	81 91       	ld	r24, Z+
 164:	6f 01       	movw	r12, r30
 166:	fc d4       	rcall	.+2552   	; 0xb60 <digitalRead>
 168:	f7 01       	movw	r30, r14
 16a:	81 93       	st	Z+, r24
 16c:	7f 01       	movw	r14, r30
    if(i == KEY_ENTER && key_state[i] == LOW && !_enter_pressed)
 16e:	c3 30       	cpi	r28, 0x03	; 3
 170:	71 f5       	brne	.+92     	; 0x1ce <_Z8key_procv+0xa8>
 172:	81 11       	cpse	r24, r1
 174:	2c c0       	rjmp	.+88     	; 0x1ce <_Z8key_procv+0xa8>
 176:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZZ8key_procvE14_enter_pressed>
 17a:	91 11       	cpse	r25, r1
 17c:	28 c0       	rjmp	.+80     	; 0x1ce <_Z8key_procv+0xa8>
    {
      if(pressing_cnt++ > 800) //3 seconds
 17e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZZ8key_procvE12pressing_cnt>
 182:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <_ZZ8key_procvE12pressing_cnt+0x1>
 186:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <_ZZ8key_procvE12pressing_cnt+0x2>
 18a:	b0 91 a7 01 	lds	r27, 0x01A7	; 0x8001a7 <_ZZ8key_procvE12pressing_cnt+0x3>
 18e:	ac 01       	movw	r20, r24
 190:	bd 01       	movw	r22, r26
 192:	4f 5f       	subi	r20, 0xFF	; 255
 194:	5f 4f       	sbci	r21, 0xFF	; 255
 196:	6f 4f       	sbci	r22, 0xFF	; 255
 198:	7f 4f       	sbci	r23, 0xFF	; 255
 19a:	40 93 a4 01 	sts	0x01A4, r20	; 0x8001a4 <_ZZ8key_procvE12pressing_cnt>
 19e:	50 93 a5 01 	sts	0x01A5, r21	; 0x8001a5 <_ZZ8key_procvE12pressing_cnt+0x1>
 1a2:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <_ZZ8key_procvE12pressing_cnt+0x2>
 1a6:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <_ZZ8key_procvE12pressing_cnt+0x3>
 1aa:	81 32       	cpi	r24, 0x21	; 33
 1ac:	93 40       	sbci	r25, 0x03	; 3
 1ae:	a1 05       	cpc	r26, r1
 1b0:	b1 05       	cpc	r27, r1
 1b2:	80 f1       	brcs	.+96     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
      {
        pressing_cnt = 0;
 1b4:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <_ZZ8key_procvE12pressing_cnt>
 1b8:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <_ZZ8key_procvE12pressing_cnt+0x1>
 1bc:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <_ZZ8key_procvE12pressing_cnt+0x2>
 1c0:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <_ZZ8key_procvE12pressing_cnt+0x3>
        ret = KEVENT_PRESSED;
        _enter_pressed = true;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <_ZZ8key_procvE14_enter_pressed>
    if(i == KEY_ENTER && key_state[i] == LOW && !_enter_pressed)
    {
      if(pressing_cnt++ > 800) //3 seconds
      {
        pressing_cnt = 0;
        ret = KEVENT_PRESSED;
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	26 c0       	rjmp	.+76     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
        _enter_pressed = true;
        break;
      }
    }else if(prev_key_state[i] != key_state[i] && key_state[i] == HIGH)
 1ce:	f8 01       	movw	r30, r16
 1d0:	90 81       	ld	r25, Z
 1d2:	89 17       	cp	r24, r25
 1d4:	c9 f0       	breq	.+50     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	b9 f4       	brne	.+46     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
    {
      if(i != KEY_ENTER || !_enter_pressed)
 1da:	c3 30       	cpi	r28, 0x03	; 3
 1dc:	21 f4       	brne	.+8      	; 0x1e6 <_Z8key_procv+0xc0>
 1de:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_ZZ8key_procvE14_enter_pressed>
 1e2:	81 11       	cpse	r24, r1
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <_Z8key_procv+0xce>
      {
        clicked_key = i;
 1e6:	c0 93 44 03 	sts	0x0344, r28	; 0x800344 <clicked_key>
        ret = KEVENT_CLICKED;
        if(i != KEY_ENTER)
 1ea:	c3 30       	cpi	r28, 0x03	; 3
 1ec:	a9 f0       	breq	.+42     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
          command_key = i;
 1ee:	c0 93 43 03 	sts	0x0343, r28	; 0x800343 <command_key>
 1f2:	12 c0       	rjmp	.+36     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
        break;
      }
      _enter_pressed = false;
 1f4:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <_ZZ8key_procvE14_enter_pressed>
      pressing_cnt = 0;
 1f8:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <_ZZ8key_procvE12pressing_cnt>
 1fc:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <_ZZ8key_procvE12pressing_cnt+0x1>
 200:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <_ZZ8key_procvE12pressing_cnt+0x2>
 204:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <_ZZ8key_procvE12pressing_cnt+0x3>
    return ret;
  }else
  {
    tm_cnt = 0;
  }
  for(uint8_t i = 0; i < KEY_CNT; i++)
 208:	cf 5f       	subi	r28, 0xFF	; 255
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	c4 30       	cpi	r28, 0x04	; 4
 210:	09 f0       	breq	.+2      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 212:	a6 cf       	rjmp	.-180    	; 0x160 <_Z8key_procv+0x3a>
{
  static uint8_t key_state[KEY_CNT] = {1,1,1,1}, prev_key_state[KEY_CNT] = {1,1,1,1};
  static uint32_t pressing_cnt = 0;
  static bool _enter_pressed = false;
  
  uint8_t ret = 0;
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	01 c0       	rjmp	.+2      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
    }else if(prev_key_state[i] != key_state[i] && key_state[i] == HIGH)
    {
      if(i != KEY_ENTER || !_enter_pressed)
      {
        clicked_key = i;
        ret = KEVENT_CLICKED;
 218:	81 e0       	ldi	r24, 0x01	; 1
      _enter_pressed = false;
      pressing_cnt = 0;
    }
  }
  
  memcpy(prev_key_state, key_state, sizeof(key_state));
 21a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <_ZZ8key_procvE9key_state>
 21e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <_ZZ8key_procvE9key_state+0x1>
 222:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZZ8key_procvE9key_state+0x2>
 226:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZZ8key_procvE9key_state+0x3>
 22a:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
 22e:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 232:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 236:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  return ret;
}
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	ff 90       	pop	r15
 242:	ef 90       	pop	r14
 244:	df 90       	pop	r13
 246:	cf 90       	pop	r12
 248:	08 95       	ret

0000024a <_Z10event_proch>:
uint8_t event_proc(uint8_t key_event)
{
  static uint8_t prev_clicked_key = 0;
  uint8_t __event = 0;
  
  if(key_event == KEVENT_PRESSED)
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	41 f4       	brne	.+16     	; 0x25e <_Z10event_proch+0x14>
  {
    Serial.println("key pressed");
 24e:	6c e0       	ldi	r22, 0x0C	; 12
 250:	71 e0       	ldi	r23, 0x01	; 1
 252:	86 e4       	ldi	r24, 0x46	; 70
 254:	93 e0       	ldi	r25, 0x03	; 3
 256:	92 d2       	rcall	.+1316   	; 0x77c <_ZN5Print7printlnEPKc>
    clicked_cnt = 0;
 258:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <clicked_cnt>
 25c:	08 95       	ret
  }else if(key_event == KEVENT_CLICKED && clicked_key != KEY_ENTER)
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	19 f5       	brne	.+70     	; 0x2a8 <_Z10event_proch+0x5e>
 262:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <clicked_key>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	f9 f0       	breq	.+62     	; 0x2a8 <_Z10event_proch+0x5e>
  {
    switch(clicked_key)
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	49 f0       	breq	.+18     	; 0x280 <_Z10event_proch+0x36>
 26e:	28 f0       	brcs	.+10     	; 0x27a <_Z10event_proch+0x30>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	59 f4       	brne	.+22     	; 0x28a <_Z10event_proch+0x40>
      break;
      case KEY_RIGHT:
        Serial.println("right key");
      break;
      case KEY_FW:
        Serial.println("fw key");
 274:	6b e2       	ldi	r22, 0x2B	; 43
 276:	71 e0       	ldi	r23, 0x01	; 1
 278:	05 c0       	rjmp	.+10     	; 0x284 <_Z10event_proch+0x3a>
  }else if(key_event == KEVENT_CLICKED && clicked_key != KEY_ENTER)
  {
    switch(clicked_key)
    {
      case KEY_LEFT:
        Serial.println("left key");
 27a:	68 e1       	ldi	r22, 0x18	; 24
 27c:	71 e0       	ldi	r23, 0x01	; 1
 27e:	02 c0       	rjmp	.+4      	; 0x284 <_Z10event_proch+0x3a>
      break;
      case KEY_RIGHT:
        Serial.println("right key");
 280:	61 e2       	ldi	r22, 0x21	; 33
 282:	71 e0       	ldi	r23, 0x01	; 1
      break;
      case KEY_FW:
        Serial.println("fw key");
 284:	86 e4       	ldi	r24, 0x46	; 70
 286:	93 e0       	ldi	r25, 0x03	; 3
 288:	79 d2       	rcall	.+1266   	; 0x77c <_ZN5Print7printlnEPKc>
      break;
      case KEY_ENTER:
        Serial.println("enter key");
      break;
    }
    if(prev_clicked_key == clicked_key)
 28a:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <clicked_key>
 28e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <_ZZ10event_prochE16prev_clicked_key>
 292:	89 13       	cpse	r24, r25
 294:	04 c0       	rjmp	.+8      	; 0x29e <_Z10event_proch+0x54>
    {
      clicked_cnt++;
 296:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <clicked_cnt>
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <_Z10event_proch+0x56>
    }else
      clicked_cnt = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <clicked_cnt>
    prev_clicked_key = clicked_key;
 2a4:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <_ZZ10event_prochE16prev_clicked_key>
  }
}
 2a8:	08 95       	ret

000002aa <_Z10Motor_stopv>:
  }
}

void Motor_stop()
{
  digitalWrite(pin_motor_left, HIGH);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	89 e0       	ldi	r24, 0x09	; 9
 2ae:	2a d4       	rcall	.+2132   	; 0xb04 <digitalWrite>
  digitalWrite(pin_motor_right, HIGH);  
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	8a e0       	ldi	r24, 0x0A	; 10
 2b4:	27 c4       	rjmp	.+2126   	; 0xb04 <digitalWrite>

000002b6 <_Z22Motor_direction_changeh>:
/*  if(dir != prev_dir)
  {
    Motor_stop();
    delay(2);
  }*/
  switch(dir)
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	51 f0       	breq	.+20     	; 0x2ce <_Z22Motor_direction_changeh+0x18>
 2ba:	20 f0       	brcs	.+8      	; 0x2c4 <_Z22Motor_direction_changeh+0xe>
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	69 f4       	brne	.+26     	; 0x2da <_Z22Motor_direction_changeh+0x24>
  {
    case KEY_FW:
    digitalWrite(pin_motor_right, LOW);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <_Z22Motor_direction_changeh+0x1a>
    digitalWrite(pin_motor_left, LOW);
//    Serial.println("one step foward");
    break;
    case KEY_LEFT:
    digitalWrite(pin_motor_right, LOW);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	8a e0       	ldi	r24, 0x0A	; 10
 2c8:	1d d4       	rcall	.+2106   	; 0xb04 <digitalWrite>
    digitalWrite(pin_motor_left, HIGH);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <_Z22Motor_direction_changeh+0x20>
//    Serial.println("one step left");
    break;
    case KEY_RIGHT:
    digitalWrite(pin_motor_right, HIGH);
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	8a e0       	ldi	r24, 0x0A	; 10
 2d2:	18 d4       	rcall	.+2096   	; 0xb04 <digitalWrite>
    digitalWrite(pin_motor_left, LOW);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	89 e0       	ldi	r24, 0x09	; 9
 2d8:	15 c4       	rjmp	.+2090   	; 0xb04 <digitalWrite>
 2da:	08 95       	ret

000002dc <_Z8app_proch>:
    prev_clicked_key = clicked_key;
  }
}

void app_proc(uint8_t key_event)
{
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	c8 2f       	mov	r28, r24
  static uint8_t nBlink = 0;
  static uint32_t tm_blink = 0;
  
  switch(ap_state)  
 2ee:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <ap_state>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <_Z8app_proch+0x1c>
 2f6:	db c0       	rjmp	.+438    	; 0x4ae <__DATA_REGION_LENGTH__+0xae>
 2f8:	28 f4       	brcc	.+10     	; 0x304 <_Z8app_proch+0x28>
 2fa:	88 23       	and	r24, r24
 2fc:	b9 f0       	breq	.+46     	; 0x32c <_Z8app_proch+0x50>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	99 f1       	breq	.+102    	; 0x368 <_Z8app_proch+0x8c>
 302:	3a c1       	rjmp	.+628    	; 0x578 <__stack+0x79>
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	09 f4       	brne	.+2      	; 0x30a <_Z8app_proch+0x2e>
 308:	d9 c0       	rjmp	.+434    	; 0x4bc <__DATA_REGION_LENGTH__+0xbc>
 30a:	84 30       	cpi	r24, 0x04	; 4
 30c:	09 f0       	breq	.+2      	; 0x310 <_Z8app_proch+0x34>
 30e:	34 c1       	rjmp	.+616    	; 0x578 <__stack+0x79>
	    tm_blink = millis();
	    digitalWrite(pin_indicator, (digitalRead(pin_indicator) == HIGH)?LOW:HIGH);
    }
  break;
  case AP_RUN:
	delay(1000);
 310:	68 ee       	ldi	r22, 0xE8	; 232
 312:	73 e0       	ldi	r23, 0x03	; 3
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	14 d3       	rcall	.+1576   	; 0x942 <delay>
 31a:	0a e7       	ldi	r16, 0x7A	; 122
 31c:	12 e0       	ldi	r17, 0x02	; 2
    
	uint16_t cmd = g_command_list.cmds[0];
    uint8_t sec = cmd & 0xff;
    uint8_t dir = (cmd >> 8) & 0xff;
	
	for(int i = 0; i < g_command_list.cnt; i++)
 31e:	c0 e0       	ldi	r28, 0x00	; 0
 320:	d0 e0       	ldi	r29, 0x00	; 0
	{
        cmd = g_command_list.cmds[i];
        dir = (cmd >> 8) & 0xff;
		sec = cmd & 0xff;
        Motor_direction_change(dir);
		delay(320*sec);
 322:	80 e4       	ldi	r24, 0x40	; 64
 324:	e8 2e       	mov	r14, r24
 326:	ff 24       	eor	r15, r15
 328:	f3 94       	inc	r15
 32a:	09 c1       	rjmp	.+530    	; 0x53e <__stack+0x3f>
  static uint32_t tm_blink = 0;
  
  switch(ap_state)  
  {
  case AP_INIT:
    ap_state = AP_INPUT_CMD;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <ap_state>
    memset(&g_command_list, 0, sizeof(CommandList));
 332:	8a ec       	ldi	r24, 0xCA	; 202
 334:	e8 e7       	ldi	r30, 0x78	; 120
 336:	f2 e0       	ldi	r31, 0x02	; 2
 338:	df 01       	movw	r26, r30
 33a:	28 2f       	mov	r18, r24
 33c:	1d 92       	st	X+, r1
 33e:	2a 95       	dec	r18
 340:	e9 f7       	brne	.-6      	; 0x33c <_Z8app_proch+0x60>
    memset(&g_command_list_rd, 0, sizeof(CommandList));
 342:	ee ea       	ldi	r30, 0xAE	; 174
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	df 01       	movw	r26, r30
 348:	1d 92       	st	X+, r1
 34a:	8a 95       	dec	r24
 34c:	e9 f7       	brne	.-6      	; 0x348 <_Z8app_proch+0x6c>
    Serial.println("enter command mode");    
 34e:	62 e3       	ldi	r22, 0x32	; 50
 350:	71 e0       	ldi	r23, 0x01	; 1
 352:	86 e4       	ldi	r24, 0x46	; 70
 354:	93 e0       	ldi	r25, 0x03	; 3
	}
	Motor_stop();
	ap_state = AP_WRITE_CMD;
  break;
  }
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
  {
  case AP_INIT:
    ap_state = AP_INPUT_CMD;
    memset(&g_command_list, 0, sizeof(CommandList));
    memset(&g_command_list_rd, 0, sizeof(CommandList));
    Serial.println("enter command mode");    
 366:	0a c2       	rjmp	.+1044   	; 0x77c <_ZN5Print7printlnEPKc>
  break;
  case AP_INPUT_CMD:
    if(nBlink > 0)
 368:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_ZZ8app_prochE6nBlink>
 36c:	88 23       	and	r24, r24
 36e:	31 f1       	breq	.+76     	; 0x3bc <_Z8app_proch+0xe0>
    {
      if(millis() - tm_blink > 500)
 370:	b7 d2       	rcall	.+1390   	; 0x8e0 <millis>
 372:	00 91 9e 01 	lds	r16, 0x019E	; 0x80019e <__data_end>
 376:	10 91 9f 01 	lds	r17, 0x019F	; 0x80019f <__data_end+0x1>
 37a:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end+0x2>
 37e:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__data_end+0x3>
 382:	dc 01       	movw	r26, r24
 384:	cb 01       	movw	r24, r22
 386:	80 1b       	sub	r24, r16
 388:	91 0b       	sbc	r25, r17
 38a:	a2 0b       	sbc	r26, r18
 38c:	b3 0b       	sbc	r27, r19
 38e:	85 3f       	cpi	r24, 0xF5	; 245
 390:	91 40       	sbci	r25, 0x01	; 1
 392:	a1 05       	cpc	r26, r1
 394:	b1 05       	cpc	r27, r1
 396:	80 f0       	brcs	.+32     	; 0x3b8 <_Z8app_proch+0xdc>
      {
        nBlink--;
 398:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_ZZ8app_prochE6nBlink>
 39c:	81 50       	subi	r24, 0x01	; 1
 39e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <_ZZ8app_prochE6nBlink>
        tm_blink = millis();
 3a2:	9e d2       	rcall	.+1340   	; 0x8e0 <millis>
 3a4:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <__data_end>
 3a8:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <__data_end+0x1>
 3ac:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end+0x2>
 3b0:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x3>
 3b4:	93 de       	rcall	.-730    	; 0xdc <_Z9led_onoffb.part.0>
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <_Z8app_proch+0xe0>
        led_onoff(LED_ON);
      }else
      {
        led_onoff(LED_OFF);
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	93 de       	rcall	.-730    	; 0xe2 <_Z9led_onoffb>
      }
    }
    if(key_event == KEVENT_CLICKED && clicked_key == KEY_ENTER)
 3bc:	c1 30       	cpi	r28, 0x01	; 1
 3be:	c9 f5       	brne	.+114    	; 0x432 <__DATA_REGION_LENGTH__+0x32>
 3c0:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <clicked_key>
 3c4:	83 30       	cpi	r24, 0x03	; 3
 3c6:	09 f0       	breq	.+2      	; 0x3ca <_Z8app_proch+0xee>
 3c8:	d7 c0       	rjmp	.+430    	; 0x578 <__stack+0x79>
    {
      Serial.println("add command");
 3ca:	65 e4       	ldi	r22, 0x45	; 69
 3cc:	71 e0       	ldi	r23, 0x01	; 1
 3ce:	86 e4       	ldi	r24, 0x46	; 70
 3d0:	93 e0       	ldi	r25, 0x03	; 3
 3d2:	d4 d1       	rcall	.+936    	; 0x77c <_ZN5Print7printlnEPKc>
      if(g_command_list_rd.cnt < MAX_CMD && clicked_cnt > 0)
 3d4:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <g_command_list_rd>
 3d8:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <g_command_list_rd+0x1>
 3dc:	24 36       	cpi	r18, 0x64	; 100
 3de:	31 05       	cpc	r19, r1
 3e0:	08 f0       	brcs	.+2      	; 0x3e4 <_Z8app_proch+0x108>
 3e2:	ca c0       	rjmp	.+404    	; 0x578 <__stack+0x79>
 3e4:	40 91 42 03 	lds	r20, 0x0342	; 0x800342 <clicked_cnt>
 3e8:	44 23       	and	r20, r20
 3ea:	09 f4       	brne	.+2      	; 0x3ee <_Z8app_proch+0x112>
 3ec:	c5 c0       	rjmp	.+394    	; 0x578 <__stack+0x79>
      {
        g_command_list_rd.cmds[g_command_list_rd.cnt] = (command_key << 8) + clicked_cnt;
 3ee:	2f 5f       	subi	r18, 0xFF	; 255
 3f0:	3f 4f       	sbci	r19, 0xFF	; 255
 3f2:	f9 01       	movw	r30, r18
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	e2 55       	subi	r30, 0x52	; 82
 3fa:	fe 4f       	sbci	r31, 0xFE	; 254
 3fc:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <command_key>
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	98 2f       	mov	r25, r24
 404:	88 27       	eor	r24, r24
 406:	84 0f       	add	r24, r20
 408:	91 1d       	adc	r25, r1
 40a:	91 83       	std	Z+1, r25	; 0x01
 40c:	80 83       	st	Z, r24
        clicked_cnt = 0;
 40e:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <clicked_cnt>
        g_command_list_rd.cnt++;
 412:	30 93 af 01 	sts	0x01AF, r19	; 0x8001af <g_command_list_rd+0x1>
 416:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <g_command_list_rd>
        nBlink = 1;
 41a:	c0 93 a2 01 	sts	0x01A2, r28	; 0x8001a2 <_ZZ8app_prochE6nBlink>
        tm_blink = millis();
 41e:	60 d2       	rcall	.+1216   	; 0x8e0 <millis>
 420:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <__data_end>
 424:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <__data_end+0x1>
 428:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end+0x2>
 42c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x3>
 430:	a3 c0       	rjmp	.+326    	; 0x578 <__stack+0x79>
      }
    }else if(key_event == KEVENT_PRESSED && g_command_list_rd.cnt > 0)
 432:	c2 30       	cpi	r28, 0x02	; 2
 434:	09 f0       	breq	.+2      	; 0x438 <__DATA_REGION_LENGTH__+0x38>
 436:	a0 c0       	rjmp	.+320    	; 0x578 <__stack+0x79>
 438:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <g_command_list_rd>
 43c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <g_command_list_rd+0x1>
 440:	89 2b       	or	r24, r25
 442:	09 f4       	brne	.+2      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 444:	99 c0       	rjmp	.+306    	; 0x578 <__stack+0x79>
    {
      ap_state = AP_OPER_DELAY;
 446:	c0 93 45 03 	sts	0x0345, r28	; 0x800345 <ap_state>
      Serial.println("storing commands...");
 44a:	61 e5       	ldi	r22, 0x51	; 81
 44c:	71 e0       	ldi	r23, 0x01	; 1
 44e:	86 e4       	ldi	r24, 0x46	; 70
 450:	93 e0       	ldi	r25, 0x03	; 3
 452:	94 d1       	rcall	.+808    	; 0x77c <_ZN5Print7printlnEPKc>
      Serial.print(g_command_list_rd.cnt);
 454:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <g_command_list_rd>
 458:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <g_command_list_rd+0x1>
 45c:	4a e0       	ldi	r20, 0x0A	; 10
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	86 e4       	ldi	r24, 0x46	; 70
 462:	93 e0       	ldi	r25, 0x03	; 3
 464:	ee d1       	rcall	.+988    	; 0x842 <_ZN5Print5printEji>
      Serial.println(" commands are ready");
 466:	65 e6       	ldi	r22, 0x65	; 101
 468:	71 e0       	ldi	r23, 0x01	; 1
 46a:	86 e4       	ldi	r24, 0x46	; 70
 46c:	93 e0       	ldi	r25, 0x03	; 3
 46e:	86 d1       	rcall	.+780    	; 0x77c <_ZN5Print7printlnEPKc>
 470:	00 eb       	ldi	r16, 0xB0	; 176
 472:	11 e0       	ldi	r17, 0x01	; 1
      for(int i = 0; i < g_command_list_rd.cnt; i++)
 474:	c0 e0       	ldi	r28, 0x00	; 0
 476:	d0 e0       	ldi	r29, 0x00	; 0
 478:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <g_command_list_rd>
 47c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <g_command_list_rd+0x1>
 480:	c8 17       	cp	r28, r24
 482:	d9 07       	cpc	r29, r25
 484:	80 f4       	brcc	.+32     	; 0x4a6 <__DATA_REGION_LENGTH__+0xa6>
      {
        Serial.print(g_command_list_rd.cmds[i], HEX);
 486:	d8 01       	movw	r26, r16
 488:	6d 91       	ld	r22, X+
 48a:	7d 91       	ld	r23, X+
 48c:	8d 01       	movw	r16, r26
 48e:	40 e1       	ldi	r20, 0x10	; 16
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	86 e4       	ldi	r24, 0x46	; 70
 494:	93 e0       	ldi	r25, 0x03	; 3
 496:	d5 d1       	rcall	.+938    	; 0x842 <_ZN5Print5printEji>
        Serial.print(", ");
 498:	69 e7       	ldi	r22, 0x79	; 121
 49a:	71 e0       	ldi	r23, 0x01	; 1
 49c:	86 e4       	ldi	r24, 0x46	; 70
 49e:	93 e0       	ldi	r25, 0x03	; 3
 4a0:	69 d1       	rcall	.+722    	; 0x774 <_ZN5Print5printEPKc>
    {
      ap_state = AP_OPER_DELAY;
      Serial.println("storing commands...");
      Serial.print(g_command_list_rd.cnt);
      Serial.println(" commands are ready");
      for(int i = 0; i < g_command_list_rd.cnt; i++)
 4a2:	21 96       	adiw	r28, 0x01	; 1
 4a4:	e9 cf       	rjmp	.-46     	; 0x478 <__DATA_REGION_LENGTH__+0x78>
      {
        Serial.print(g_command_list_rd.cmds[i], HEX);
        Serial.print(", ");
      }
      
      nBlink = 8;
 4a6:	88 e0       	ldi	r24, 0x08	; 8
 4a8:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <_ZZ8app_prochE6nBlink>
 4ac:	65 c0       	rjmp	.+202    	; 0x578 <__stack+0x79>
 4ae:	16 de       	rcall	.-980    	; 0xdc <_Z9led_onoffb.part.0>
    }
  break;
  case AP_OPER_DELAY:
	led_onoff(LED_ON);
	delay(500);
 4b0:	64 ef       	ldi	r22, 0xF4	; 244
 4b2:	71 e0       	ldi	r23, 0x01	; 1
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	44 d2       	rcall	.+1160   	; 0x942 <delay>
 4ba:	5b c0       	rjmp	.+182    	; 0x572 <__stack+0x73>
	ap_state = AP_WRITE_CMD;
	
  break;
  case AP_WRITE_CMD:
	if(key_event == KEVENT_CLICKED && clicked_key == KEY_ENTER)
 4bc:	c1 30       	cpi	r28, 0x01	; 1
 4be:	91 f4       	brne	.+36     	; 0x4e4 <__DATA_REGION_LENGTH__+0xe4>
 4c0:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <clicked_key>
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	71 f4       	brne	.+28     	; 0x4e4 <__DATA_REGION_LENGTH__+0xe4>
	{
		memcpy(&g_command_list, &g_command_list_rd, sizeof(CommandList));
 4c8:	8a ec       	ldi	r24, 0xCA	; 202
 4ca:	ee ea       	ldi	r30, 0xAE	; 174
 4cc:	f1 e0       	ldi	r31, 0x01	; 1
 4ce:	a8 e7       	ldi	r26, 0x78	; 120
 4d0:	b2 e0       	ldi	r27, 0x02	; 2
 4d2:	01 90       	ld	r0, Z+
 4d4:	0d 92       	st	X+, r0
 4d6:	8a 95       	dec	r24
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__DATA_REGION_LENGTH__+0xd2>
		led_onoff(LED_OFF);
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	02 de       	rcall	.-1020   	; 0xe2 <_Z9led_onoffb>
		ap_state = AP_RUN;
 4de:	84 e0       	ldi	r24, 0x04	; 4
 4e0:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <ap_state>
	}
    if(millis() - tm_blink > 500)
 4e4:	fd d1       	rcall	.+1018   	; 0x8e0 <millis>
 4e6:	00 91 9e 01 	lds	r16, 0x019E	; 0x80019e <__data_end>
 4ea:	10 91 9f 01 	lds	r17, 0x019F	; 0x80019f <__data_end+0x1>
 4ee:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end+0x2>
 4f2:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__data_end+0x3>
 4f6:	dc 01       	movw	r26, r24
 4f8:	cb 01       	movw	r24, r22
 4fa:	80 1b       	sub	r24, r16
 4fc:	91 0b       	sbc	r25, r17
 4fe:	a2 0b       	sbc	r26, r18
 500:	b3 0b       	sbc	r27, r19
 502:	85 3f       	cpi	r24, 0xF5	; 245
 504:	91 40       	sbci	r25, 0x01	; 1
 506:	a1 05       	cpc	r26, r1
 508:	b1 05       	cpc	r27, r1
 50a:	b0 f1       	brcs	.+108    	; 0x578 <__stack+0x79>
    {
	    tm_blink = millis();
 50c:	e9 d1       	rcall	.+978    	; 0x8e0 <millis>
 50e:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <__data_end>
 512:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <__data_end+0x1>
 516:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end+0x2>
 51a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x3>
	    digitalWrite(pin_indicator, (digitalRead(pin_indicator) == HIGH)?LOW:HIGH);
 51e:	80 e1       	ldi	r24, 0x10	; 16
 520:	1f d3       	rcall	.+1598   	; 0xb60 <digitalRead>
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	09 f4       	brne	.+2      	; 0x52a <__stack+0x2b>
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	80 e1       	ldi	r24, 0x10	; 16
	}
	Motor_stop();
	ap_state = AP_WRITE_CMD;
  break;
  }
}
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	0f 91       	pop	r16
 534:	ff 90       	pop	r15
 536:	ef 90       	pop	r14
 538:	df 90       	pop	r13
 53a:	cf 90       	pop	r12
		ap_state = AP_RUN;
	}
    if(millis() - tm_blink > 500)
    {
	    tm_blink = millis();
	    digitalWrite(pin_indicator, (digitalRead(pin_indicator) == HIGH)?LOW:HIGH);
 53c:	e3 c2       	rjmp	.+1478   	; 0xb04 <digitalWrite>
    
	uint16_t cmd = g_command_list.cmds[0];
    uint8_t sec = cmd & 0xff;
    uint8_t dir = (cmd >> 8) & 0xff;
	
	for(int i = 0; i < g_command_list.cnt; i++)
 53e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_command_list>
 542:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_command_list+0x1>
 546:	c8 17       	cp	r28, r24
 548:	d9 07       	cpc	r29, r25
 54a:	90 f4       	brcc	.+36     	; 0x570 <__stack+0x71>
	{
        cmd = g_command_list.cmds[i];
 54c:	d8 01       	movw	r26, r16
 54e:	cd 90       	ld	r12, X+
 550:	dd 90       	ld	r13, X+
 552:	8d 01       	movw	r16, r26
        dir = (cmd >> 8) & 0xff;
		sec = cmd & 0xff;
        Motor_direction_change(dir);
 554:	8d 2d       	mov	r24, r13
 556:	af de       	rcall	.-674    	; 0x2b6 <_Z22Motor_direction_changeh>
		delay(320*sec);
 558:	ce 9c       	mul	r12, r14
 55a:	b0 01       	movw	r22, r0
 55c:	cf 9c       	mul	r12, r15
 55e:	70 0d       	add	r23, r0
 560:	11 24       	eor	r1, r1
 562:	07 2e       	mov	r0, r23
 564:	00 0c       	add	r0, r0
 566:	88 0b       	sbc	r24, r24
 568:	99 0b       	sbc	r25, r25
 56a:	eb d1       	rcall	.+982    	; 0x942 <delay>
    
	uint16_t cmd = g_command_list.cmds[0];
    uint8_t sec = cmd & 0xff;
    uint8_t dir = (cmd >> 8) & 0xff;
	
	for(int i = 0; i < g_command_list.cnt; i++)
 56c:	21 96       	adiw	r28, 0x01	; 1
 56e:	e7 cf       	rjmp	.-50     	; 0x53e <__stack+0x3f>
        dir = (cmd >> 8) & 0xff;
		sec = cmd & 0xff;
        Motor_direction_change(dir);
		delay(320*sec);
	}
	Motor_stop();
 570:	9c de       	rcall	.-712    	; 0x2aa <_Z10Motor_stopv>
	ap_state = AP_WRITE_CMD;
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <ap_state>
  break;
  }
}
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	ff 90       	pop	r15
 582:	ef 90       	pop	r14
 584:	df 90       	pop	r13
 586:	cf 90       	pop	r12
 588:	08 95       	ret

0000058a <loop>:
  digitalWrite(pin_motor_left, HIGH);
  
  led_onoff(LED_ON);
}

void loop() {
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
  // put your main code here, to run repeatedly:
  uint8_t _k_event = 0;
  static uint32_t tm = 0;
  tm = micros();
 58e:	b4 d1       	rcall	.+872    	; 0x8f8 <micros>
 590:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <_ZZ4loopE2tm>
 594:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <_ZZ4loopE2tm+0x1>
 598:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <_ZZ4loopE2tm+0x2>
 59c:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <_ZZ4loopE2tm+0x3>
  
  _k_event = key_proc();
 5a0:	c2 dd       	rcall	.-1148   	; 0x126 <_Z8key_procv>
 5a2:	c8 2f       	mov	r28, r24
  event_proc(_k_event);
 5a4:	52 de       	rcall	.-860    	; 0x24a <_Z10event_proch>
  app_proc(_k_event);
 5a6:	8c 2f       	mov	r24, r28
 5a8:	99 de       	rcall	.-718    	; 0x2dc <_Z8app_proch>
  
  _k_event = 0;
  delayMicroseconds(1000 + tm - micros());
 5aa:	c0 91 aa 01 	lds	r28, 0x01AA	; 0x8001aa <_ZZ4loopE2tm>
 5ae:	d0 91 ab 01 	lds	r29, 0x01AB	; 0x8001ab <_ZZ4loopE2tm+0x1>
 5b2:	a2 d1       	rcall	.+836    	; 0x8f8 <micros>
 5b4:	9e 01       	movw	r18, r28
 5b6:	28 51       	subi	r18, 0x18	; 24
 5b8:	3c 4f       	sbci	r19, 0xFC	; 252
 5ba:	c9 01       	movw	r24, r18
 5bc:	86 1b       	sub	r24, r22
 5be:	97 0b       	sbc	r25, r23
}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
  _k_event = key_proc();
  event_proc(_k_event);
  app_proc(_k_event);
  
  _k_event = 0;
  delayMicroseconds(1000 + tm - micros());
 5c4:	f7 c1       	rjmp	.+1006   	; 0x9b4 <delayMicroseconds>

000005c6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 5c6:	1f 92       	push	r1
 5c8:	0f 92       	push	r0
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	2f 93       	push	r18
 5d2:	8f 93       	push	r24
 5d4:	9f 93       	push	r25
 5d6:	ef 93       	push	r30
 5d8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 5da:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <Serial+0x10>
 5de:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <Serial+0x11>
 5e2:	80 81       	ld	r24, Z
 5e4:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <Serial+0x16>
 5e8:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <Serial+0x17>
 5ec:	82 fd       	sbrc	r24, 2
 5ee:	12 c0       	rjmp	.+36     	; 0x614 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5f0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5f2:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <Serial+0x19>
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
 5f8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5fa:	20 91 60 03 	lds	r18, 0x0360	; 0x800360 <Serial+0x1a>
 5fe:	82 17       	cp	r24, r18
 600:	51 f0       	breq	.+20     	; 0x616 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 602:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <Serial+0x19>
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	ea 5b       	subi	r30, 0xBA	; 186
 60a:	fc 4f       	sbci	r31, 0xFC	; 252
 60c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 60e:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <Serial+0x19>
 612:	01 c0       	rjmp	.+2      	; 0x616 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 614:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 616:	ff 91       	pop	r31
 618:	ef 91       	pop	r30
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	2f 91       	pop	r18
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 62a:	1f 92       	push	r1
 62c:	0f 92       	push	r0
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	0f 92       	push	r0
 632:	11 24       	eor	r1, r1
 634:	2f 93       	push	r18
 636:	3f 93       	push	r19
 638:	4f 93       	push	r20
 63a:	5f 93       	push	r21
 63c:	6f 93       	push	r22
 63e:	7f 93       	push	r23
 640:	8f 93       	push	r24
 642:	9f 93       	push	r25
 644:	af 93       	push	r26
 646:	bf 93       	push	r27
 648:	ef 93       	push	r30
 64a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 64c:	86 e4       	ldi	r24, 0x46	; 70
 64e:	93 e0       	ldi	r25, 0x03	; 3
 650:	f8 d2       	rcall	.+1520   	; 0xc42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	bf 91       	pop	r27
 658:	af 91       	pop	r26
 65a:	9f 91       	pop	r25
 65c:	8f 91       	pop	r24
 65e:	7f 91       	pop	r23
 660:	6f 91       	pop	r22
 662:	5f 91       	pop	r21
 664:	4f 91       	pop	r20
 666:	3f 91       	pop	r19
 668:	2f 91       	pop	r18
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 674:	86 e4       	ldi	r24, 0x46	; 70
 676:	93 e0       	ldi	r25, 0x03	; 3
 678:	9b d2       	rcall	.+1334   	; 0xbb0 <_ZN14HardwareSerial9availableEv>
 67a:	21 e0       	ldi	r18, 0x01	; 1
 67c:	89 2b       	or	r24, r25
 67e:	09 f4       	brne	.+2      	; 0x682 <_Z17Serial0_availablev+0xe>
 680:	20 e0       	ldi	r18, 0x00	; 0
}
 682:	82 2f       	mov	r24, r18
 684:	08 95       	ret

00000686 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 686:	e6 e4       	ldi	r30, 0x46	; 70
 688:	f3 e0       	ldi	r31, 0x03	; 3
 68a:	13 82       	std	Z+3, r1	; 0x03
 68c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 68e:	88 ee       	ldi	r24, 0xE8	; 232
 690:	93 e0       	ldi	r25, 0x03	; 3
 692:	a0 e0       	ldi	r26, 0x00	; 0
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	84 83       	std	Z+4, r24	; 0x04
 698:	95 83       	std	Z+5, r25	; 0x05
 69a:	a6 83       	std	Z+6, r26	; 0x06
 69c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 69e:	8f e8       	ldi	r24, 0x8F	; 143
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	91 83       	std	Z+1, r25	; 0x01
 6a4:	80 83       	st	Z, r24
 6a6:	85 ec       	ldi	r24, 0xC5	; 197
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	95 87       	std	Z+13, r25	; 0x0d
 6ac:	84 87       	std	Z+12, r24	; 0x0c
 6ae:	84 ec       	ldi	r24, 0xC4	; 196
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	97 87       	std	Z+15, r25	; 0x0f
 6b4:	86 87       	std	Z+14, r24	; 0x0e
 6b6:	80 ec       	ldi	r24, 0xC0	; 192
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	91 8b       	std	Z+17, r25	; 0x11
 6bc:	80 8b       	std	Z+16, r24	; 0x10
 6be:	81 ec       	ldi	r24, 0xC1	; 193
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	93 8b       	std	Z+19, r25	; 0x13
 6c4:	82 8b       	std	Z+18, r24	; 0x12
 6c6:	82 ec       	ldi	r24, 0xC2	; 194
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	95 8b       	std	Z+21, r25	; 0x15
 6cc:	84 8b       	std	Z+20, r24	; 0x14
 6ce:	86 ec       	ldi	r24, 0xC6	; 198
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	97 8b       	std	Z+23, r25	; 0x17
 6d4:	86 8b       	std	Z+22, r24	; 0x16
 6d6:	11 8e       	std	Z+25, r1	; 0x19
 6d8:	12 8e       	std	Z+26, r1	; 0x1a
 6da:	13 8e       	std	Z+27, r1	; 0x1b
 6dc:	14 8e       	std	Z+28, r1	; 0x1c
 6de:	08 95       	ret

000006e0 <initVariant>:
 6e0:	08 95       	ret

000006e2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6e2:	73 d1       	rcall	.+742    	; 0x9ca <init>

	initVariant();
 6e4:	fd df       	rcall	.-6      	; 0x6e0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6e6:	02 dd       	rcall	.-1532   	; 0xec <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6e8:	c5 e1       	ldi	r28, 0x15	; 21
 6ea:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
 6ec:	4e df       	rcall	.-356    	; 0x58a <loop>
		if (serialEventRun) serialEventRun();
 6ee:	20 97       	sbiw	r28, 0x00	; 0
 6f0:	e9 f3       	breq	.-6      	; 0x6ec <main+0xa>
 6f2:	9b d2       	rcall	.+1334   	; 0xc2a <_Z14serialEventRunv>
 6f4:	fb cf       	rjmp	.-10     	; 0x6ec <main+0xa>

000006f6 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
 6f6:	cf 92       	push	r12
 6f8:	df 92       	push	r13
 6fa:	ef 92       	push	r14
 6fc:	ff 92       	push	r15
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	6c 01       	movw	r12, r24
 708:	7a 01       	movw	r14, r20
 70a:	8b 01       	movw	r16, r22
 70c:	c0 e0       	ldi	r28, 0x00	; 0
 70e:	d0 e0       	ldi	r29, 0x00	; 0
 710:	ce 15       	cp	r28, r14
 712:	df 05       	cpc	r29, r15
 714:	81 f0       	breq	.+32     	; 0x736 <_ZN5Print5writeEPKhj+0x40>
 716:	d8 01       	movw	r26, r16
 718:	6d 91       	ld	r22, X+
 71a:	8d 01       	movw	r16, r26
 71c:	d6 01       	movw	r26, r12
 71e:	ed 91       	ld	r30, X+
 720:	fc 91       	ld	r31, X
 722:	01 90       	ld	r0, Z+
 724:	f0 81       	ld	r31, Z
 726:	e0 2d       	mov	r30, r0
 728:	c6 01       	movw	r24, r12
 72a:	09 95       	icall
 72c:	89 2b       	or	r24, r25
 72e:	11 f0       	breq	.+4      	; 0x734 <_ZN5Print5writeEPKhj+0x3e>
 730:	21 96       	adiw	r28, 0x01	; 1
 732:	ee cf       	rjmp	.-36     	; 0x710 <_ZN5Print5writeEPKhj+0x1a>
 734:	7e 01       	movw	r14, r28
 736:	c7 01       	movw	r24, r14
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	ff 90       	pop	r15
 742:	ef 90       	pop	r14
 744:	df 90       	pop	r13
 746:	cf 90       	pop	r12
 748:	08 95       	ret

0000074a <_ZN5Print5writeEPKc>:
 74a:	61 15       	cp	r22, r1
 74c:	71 05       	cpc	r23, r1
 74e:	79 f0       	breq	.+30     	; 0x76e <_ZN5Print5writeEPKc+0x24>
 750:	fb 01       	movw	r30, r22
 752:	01 90       	ld	r0, Z+
 754:	00 20       	and	r0, r0
 756:	e9 f7       	brne	.-6      	; 0x752 <_ZN5Print5writeEPKc+0x8>
 758:	31 97       	sbiw	r30, 0x01	; 1
 75a:	af 01       	movw	r20, r30
 75c:	46 1b       	sub	r20, r22
 75e:	57 0b       	sbc	r21, r23
 760:	dc 01       	movw	r26, r24
 762:	ed 91       	ld	r30, X+
 764:	fc 91       	ld	r31, X
 766:	02 80       	ldd	r0, Z+2	; 0x02
 768:	f3 81       	ldd	r31, Z+3	; 0x03
 76a:	e0 2d       	mov	r30, r0
 76c:	09 94       	ijmp
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	08 95       	ret

00000774 <_ZN5Print5printEPKc>:
 774:	ea cf       	rjmp	.-44     	; 0x74a <_ZN5Print5writeEPKc>

00000776 <_ZN5Print7printlnEv>:
 776:	6c e7       	ldi	r22, 0x7C	; 124
 778:	71 e0       	ldi	r23, 0x01	; 1
 77a:	e7 cf       	rjmp	.-50     	; 0x74a <_ZN5Print5writeEPKc>

0000077c <_ZN5Print7printlnEPKc>:
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	ec 01       	movw	r28, r24
 786:	e1 df       	rcall	.-62     	; 0x74a <_ZN5Print5writeEPKc>
 788:	8c 01       	movw	r16, r24
 78a:	ce 01       	movw	r24, r28
 78c:	f4 df       	rcall	.-24     	; 0x776 <_ZN5Print7printlnEv>
 78e:	80 0f       	add	r24, r16
 790:	91 1f       	adc	r25, r17
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	1f 91       	pop	r17
 798:	0f 91       	pop	r16
 79a:	08 95       	ret

0000079c <_ZN5Print11printNumberEmh>:
 79c:	8f 92       	push	r8
 79e:	9f 92       	push	r9
 7a0:	af 92       	push	r10
 7a2:	bf 92       	push	r11
 7a4:	ef 92       	push	r14
 7a6:	ff 92       	push	r15
 7a8:	0f 93       	push	r16
 7aa:	1f 93       	push	r17
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	cd b7       	in	r28, 0x3d	; 61
 7b2:	de b7       	in	r29, 0x3e	; 62
 7b4:	a1 97       	sbiw	r28, 0x21	; 33
 7b6:	0f b6       	in	r0, 0x3f	; 63
 7b8:	f8 94       	cli
 7ba:	de bf       	out	0x3e, r29	; 62
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	cd bf       	out	0x3d, r28	; 61
 7c0:	7c 01       	movw	r14, r24
 7c2:	fa 01       	movw	r30, r20
 7c4:	cb 01       	movw	r24, r22
 7c6:	19 a2       	std	Y+33, r1	; 0x21
 7c8:	22 30       	cpi	r18, 0x02	; 2
 7ca:	08 f4       	brcc	.+2      	; 0x7ce <_ZN5Print11printNumberEmh+0x32>
 7cc:	2a e0       	ldi	r18, 0x0A	; 10
 7ce:	8e 01       	movw	r16, r28
 7d0:	0f 5d       	subi	r16, 0xDF	; 223
 7d2:	1f 4f       	sbci	r17, 0xFF	; 255
 7d4:	82 2e       	mov	r8, r18
 7d6:	91 2c       	mov	r9, r1
 7d8:	a1 2c       	mov	r10, r1
 7da:	b1 2c       	mov	r11, r1
 7dc:	bf 01       	movw	r22, r30
 7de:	a5 01       	movw	r20, r10
 7e0:	94 01       	movw	r18, r8
 7e2:	bf d2       	rcall	.+1406   	; 0xd62 <__udivmodsi4>
 7e4:	f9 01       	movw	r30, r18
 7e6:	ca 01       	movw	r24, r20
 7e8:	01 50       	subi	r16, 0x01	; 1
 7ea:	11 09       	sbc	r17, r1
 7ec:	6a 30       	cpi	r22, 0x0A	; 10
 7ee:	10 f4       	brcc	.+4      	; 0x7f4 <_ZN5Print11printNumberEmh+0x58>
 7f0:	60 5d       	subi	r22, 0xD0	; 208
 7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <_ZN5Print11printNumberEmh+0x5a>
 7f4:	69 5c       	subi	r22, 0xC9	; 201
 7f6:	d8 01       	movw	r26, r16
 7f8:	6c 93       	st	X, r22
 7fa:	23 2b       	or	r18, r19
 7fc:	24 2b       	or	r18, r20
 7fe:	25 2b       	or	r18, r21
 800:	69 f7       	brne	.-38     	; 0x7dc <_ZN5Print11printNumberEmh+0x40>
 802:	b8 01       	movw	r22, r16
 804:	c7 01       	movw	r24, r14
 806:	a1 df       	rcall	.-190    	; 0x74a <_ZN5Print5writeEPKc>
 808:	a1 96       	adiw	r28, 0x21	; 33
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	f8 94       	cli
 80e:	de bf       	out	0x3e, r29	; 62
 810:	0f be       	out	0x3f, r0	; 63
 812:	cd bf       	out	0x3d, r28	; 61
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	1f 91       	pop	r17
 81a:	0f 91       	pop	r16
 81c:	ff 90       	pop	r15
 81e:	ef 90       	pop	r14
 820:	bf 90       	pop	r11
 822:	af 90       	pop	r10
 824:	9f 90       	pop	r9
 826:	8f 90       	pop	r8
 828:	08 95       	ret

0000082a <_ZN5Print5printEmi>:
 82a:	21 15       	cp	r18, r1
 82c:	31 05       	cpc	r19, r1
 82e:	41 f4       	brne	.+16     	; 0x840 <_ZN5Print5printEmi+0x16>
 830:	dc 01       	movw	r26, r24
 832:	ed 91       	ld	r30, X+
 834:	fc 91       	ld	r31, X
 836:	01 90       	ld	r0, Z+
 838:	f0 81       	ld	r31, Z
 83a:	e0 2d       	mov	r30, r0
 83c:	64 2f       	mov	r22, r20
 83e:	09 94       	ijmp
 840:	ad cf       	rjmp	.-166    	; 0x79c <_ZN5Print11printNumberEmh>

00000842 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
 842:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
 844:	ab 01       	movw	r20, r22
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	70 e0       	ldi	r23, 0x00	; 0
 84a:	ef cf       	rjmp	.-34     	; 0x82a <_ZN5Print5printEmi>

0000084c <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 84c:	1f 92       	push	r1
 84e:	0f 92       	push	r0
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	0f 92       	push	r0
 854:	11 24       	eor	r1, r1
 856:	2f 93       	push	r18
 858:	3f 93       	push	r19
 85a:	8f 93       	push	r24
 85c:	9f 93       	push	r25
 85e:	af 93       	push	r26
 860:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 862:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <timer0_millis>
 866:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <timer0_millis+0x1>
 86a:	a0 91 e6 03 	lds	r26, 0x03E6	; 0x8003e6 <timer0_millis+0x2>
 86e:	b0 91 e7 03 	lds	r27, 0x03E7	; 0x8003e7 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 872:	30 91 e3 03 	lds	r19, 0x03E3	; 0x8003e3 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
 876:	2c e0       	ldi	r18, 0x0C	; 12
 878:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 87a:	2d 37       	cpi	r18, 0x7D	; 125
 87c:	20 f4       	brcc	.+8      	; 0x886 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 87e:	04 96       	adiw	r24, 0x04	; 4
 880:	a1 1d       	adc	r26, r1
 882:	b1 1d       	adc	r27, r1
 884:	05 c0       	rjmp	.+10     	; 0x890 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 886:	2f e8       	ldi	r18, 0x8F	; 143
 888:	23 0f       	add	r18, r19
		m += 1;
 88a:	05 96       	adiw	r24, 0x05	; 5
 88c:	a1 1d       	adc	r26, r1
 88e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 890:	20 93 e3 03 	sts	0x03E3, r18	; 0x8003e3 <timer0_fract>
	timer0_millis = m;
 894:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <timer0_millis>
 898:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <timer0_millis+0x1>
 89c:	a0 93 e6 03 	sts	0x03E6, r26	; 0x8003e6 <timer0_millis+0x2>
 8a0:	b0 93 e7 03 	sts	0x03E7, r27	; 0x8003e7 <timer0_millis+0x3>
	timer0_overflow_count++;
 8a4:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <timer0_overflow_count>
 8a8:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <timer0_overflow_count+0x1>
 8ac:	a0 91 ea 03 	lds	r26, 0x03EA	; 0x8003ea <timer0_overflow_count+0x2>
 8b0:	b0 91 eb 03 	lds	r27, 0x03EB	; 0x8003eb <timer0_overflow_count+0x3>
 8b4:	01 96       	adiw	r24, 0x01	; 1
 8b6:	a1 1d       	adc	r26, r1
 8b8:	b1 1d       	adc	r27, r1
 8ba:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <timer0_overflow_count>
 8be:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <timer0_overflow_count+0x1>
 8c2:	a0 93 ea 03 	sts	0x03EA, r26	; 0x8003ea <timer0_overflow_count+0x2>
 8c6:	b0 93 eb 03 	sts	0x03EB, r27	; 0x8003eb <timer0_overflow_count+0x3>
}
 8ca:	bf 91       	pop	r27
 8cc:	af 91       	pop	r26
 8ce:	9f 91       	pop	r25
 8d0:	8f 91       	pop	r24
 8d2:	3f 91       	pop	r19
 8d4:	2f 91       	pop	r18
 8d6:	0f 90       	pop	r0
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	0f 90       	pop	r0
 8dc:	1f 90       	pop	r1
 8de:	18 95       	reti

000008e0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 8e0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 8e2:	f8 94       	cli
	m = timer0_millis;
 8e4:	60 91 e4 03 	lds	r22, 0x03E4	; 0x8003e4 <timer0_millis>
 8e8:	70 91 e5 03 	lds	r23, 0x03E5	; 0x8003e5 <timer0_millis+0x1>
 8ec:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <timer0_millis+0x2>
 8f0:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <timer0_millis+0x3>
	SREG = oldSREG;
 8f4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
 8f6:	08 95       	ret

000008f8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 8f8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 8fa:	f8 94       	cli
	m = timer0_overflow_count;
 8fc:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <timer0_overflow_count>
 900:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <timer0_overflow_count+0x1>
 904:	a0 91 ea 03 	lds	r26, 0x03EA	; 0x8003ea <timer0_overflow_count+0x2>
 908:	b0 91 eb 03 	lds	r27, 0x03EB	; 0x8003eb <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 90c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 90e:	a8 9b       	sbis	0x15, 0	; 21
 910:	05 c0       	rjmp	.+10     	; 0x91c <micros+0x24>
 912:	2f 3f       	cpi	r18, 0xFF	; 255
 914:	19 f0       	breq	.+6      	; 0x91c <micros+0x24>
		m++;
 916:	01 96       	adiw	r24, 0x01	; 1
 918:	a1 1d       	adc	r26, r1
 91a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 91c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 91e:	ba 2f       	mov	r27, r26
 920:	a9 2f       	mov	r26, r25
 922:	98 2f       	mov	r25, r24
 924:	88 27       	eor	r24, r24
 926:	82 0f       	add	r24, r18
 928:	91 1d       	adc	r25, r1
 92a:	a1 1d       	adc	r26, r1
 92c:	b1 1d       	adc	r27, r1
 92e:	bc 01       	movw	r22, r24
 930:	cd 01       	movw	r24, r26
 932:	44 e0       	ldi	r20, 0x04	; 4
 934:	66 0f       	add	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	4a 95       	dec	r20
 93e:	d1 f7       	brne	.-12     	; 0x934 <micros+0x3c>
}
 940:	08 95       	ret

00000942 <delay>:

void delay(unsigned long ms)
{
 942:	8f 92       	push	r8
 944:	9f 92       	push	r9
 946:	af 92       	push	r10
 948:	bf 92       	push	r11
 94a:	cf 92       	push	r12
 94c:	df 92       	push	r13
 94e:	ef 92       	push	r14
 950:	ff 92       	push	r15
 952:	6b 01       	movw	r12, r22
 954:	7c 01       	movw	r14, r24
	uint32_t start = micros();
 956:	d0 df       	rcall	.-96     	; 0x8f8 <micros>
 958:	4b 01       	movw	r8, r22
 95a:	5c 01       	movw	r10, r24

	while (ms > 0) {
 95c:	c1 14       	cp	r12, r1
 95e:	d1 04       	cpc	r13, r1
 960:	e1 04       	cpc	r14, r1
 962:	f1 04       	cpc	r15, r1
 964:	f1 f0       	breq	.+60     	; 0x9a2 <delay+0x60>
		yield();
 966:	fc d1       	rcall	.+1016   	; 0xd60 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
 968:	c7 df       	rcall	.-114    	; 0x8f8 <micros>
 96a:	dc 01       	movw	r26, r24
 96c:	cb 01       	movw	r24, r22
 96e:	88 19       	sub	r24, r8
 970:	99 09       	sbc	r25, r9
 972:	aa 09       	sbc	r26, r10
 974:	bb 09       	sbc	r27, r11
 976:	88 3e       	cpi	r24, 0xE8	; 232
 978:	93 40       	sbci	r25, 0x03	; 3
 97a:	a1 05       	cpc	r26, r1
 97c:	b1 05       	cpc	r27, r1
 97e:	70 f3       	brcs	.-36     	; 0x95c <delay+0x1a>
			ms--;
 980:	21 e0       	ldi	r18, 0x01	; 1
 982:	c2 1a       	sub	r12, r18
 984:	d1 08       	sbc	r13, r1
 986:	e1 08       	sbc	r14, r1
 988:	f1 08       	sbc	r15, r1
			start += 1000;
 98a:	88 ee       	ldi	r24, 0xE8	; 232
 98c:	88 0e       	add	r8, r24
 98e:	83 e0       	ldi	r24, 0x03	; 3
 990:	98 1e       	adc	r9, r24
 992:	a1 1c       	adc	r10, r1
 994:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 996:	c1 14       	cp	r12, r1
 998:	d1 04       	cpc	r13, r1
 99a:	e1 04       	cpc	r14, r1
 99c:	f1 04       	cpc	r15, r1
 99e:	21 f7       	brne	.-56     	; 0x968 <delay+0x26>
 9a0:	dd cf       	rjmp	.-70     	; 0x95c <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	df 90       	pop	r13
 9a8:	cf 90       	pop	r12
 9aa:	bf 90       	pop	r11
 9ac:	af 90       	pop	r10
 9ae:	9f 90       	pop	r9
 9b0:	8f 90       	pop	r8
 9b2:	08 95       	ret

000009b4 <delayMicroseconds>:
#else
	// for the 1 MHz internal clock (default settings for common Atmega microcontrollers)

	// the overhead of the function calls is 14 (16) cycles
	if (us <= 16) return; //= 3 cycles, (4 when true)
	if (us <= 25) return; //= 3 cycles, (4 when true), (must be at least 25 if we want to substract 22)
 9b4:	8a 31       	cpi	r24, 0x1A	; 26
 9b6:	91 05       	cpc	r25, r1
 9b8:	38 f0       	brcs	.+14     	; 0x9c8 <delayMicroseconds+0x14>

	// compensate for the time taken by the preceeding and next commands (about 22 cycles)
	us -= 22; // = 2 cycles
 9ba:	46 97       	sbiw	r24, 0x16	; 22
	// the following loop takes 4 microseconds (4 cycles)
	// per iteration, so execute it us/4 times
	// us is at least 4, divided by 4 gives us 1 (no zero delay bug)
	us >>= 2; // us div 4, = 4 cycles
 9bc:	96 95       	lsr	r25
 9be:	87 95       	ror	r24
 9c0:	96 95       	lsr	r25
 9c2:	87 95       	ror	r24
	

#endif

	// busy wait
	__asm__ __volatile__ (
 9c4:	01 97       	sbiw	r24, 0x01	; 1
 9c6:	f1 f7       	brne	.-4      	; 0x9c4 <delayMicroseconds+0x10>
 9c8:	08 95       	ret

000009ca <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 9ca:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 9cc:	84 b5       	in	r24, 0x24	; 36
 9ce:	82 60       	ori	r24, 0x02	; 2
 9d0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 9d2:	84 b5       	in	r24, 0x24	; 36
 9d4:	81 60       	ori	r24, 0x01	; 1
 9d6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 9d8:	85 b5       	in	r24, 0x25	; 37
 9da:	82 60       	ori	r24, 0x02	; 2
 9dc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 9de:	85 b5       	in	r24, 0x25	; 37
 9e0:	81 60       	ori	r24, 0x01	; 1
 9e2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 9e4:	ee e6       	ldi	r30, 0x6E	; 110
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	80 81       	ld	r24, Z
 9ea:	81 60       	ori	r24, 0x01	; 1
 9ec:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 9ee:	e1 e8       	ldi	r30, 0x81	; 129
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 9f4:	80 81       	ld	r24, Z
 9f6:	82 60       	ori	r24, 0x02	; 2
 9f8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 9fa:	e0 e8       	ldi	r30, 0x80	; 128
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	80 81       	ld	r24, Z
 a00:	81 60       	ori	r24, 0x01	; 1
 a02:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 a04:	e1 eb       	ldi	r30, 0xB1	; 177
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	84 60       	ori	r24, 0x04	; 4
 a0c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 a0e:	e0 eb       	ldi	r30, 0xB0	; 176
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	81 60       	ori	r24, 0x01	; 1
 a16:	80 83       	st	Z, r24
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		cbi(ADCSRA, ADPS0);
	#elif F_CPU >= 4000000 // 4 MHz / 32 = 125 KHz
		sbi(ADCSRA, ADPS2);
 a18:	ea e7       	ldi	r30, 0x7A	; 122
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	84 60       	ori	r24, 0x04	; 4
 a20:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS1);
 a22:	80 81       	ld	r24, Z
 a24:	8d 7f       	andi	r24, 0xFD	; 253
 a26:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 a28:	80 81       	ld	r24, Z
 a2a:	81 60       	ori	r24, 0x01	; 1
 a2c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 a2e:	80 81       	ld	r24, Z
 a30:	80 68       	ori	r24, 0x80	; 128
 a32:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 a34:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
 a38:	08 95       	ret

00000a3a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 a3a:	83 30       	cpi	r24, 0x03	; 3
 a3c:	81 f0       	breq	.+32     	; 0xa5e <turnOffPWM+0x24>
 a3e:	28 f4       	brcc	.+10     	; 0xa4a <turnOffPWM+0x10>
 a40:	81 30       	cpi	r24, 0x01	; 1
 a42:	99 f0       	breq	.+38     	; 0xa6a <turnOffPWM+0x30>
 a44:	82 30       	cpi	r24, 0x02	; 2
 a46:	a1 f0       	breq	.+40     	; 0xa70 <turnOffPWM+0x36>
 a48:	08 95       	ret
 a4a:	87 30       	cpi	r24, 0x07	; 7
 a4c:	a9 f0       	breq	.+42     	; 0xa78 <turnOffPWM+0x3e>
 a4e:	88 30       	cpi	r24, 0x08	; 8
 a50:	b9 f0       	breq	.+46     	; 0xa80 <turnOffPWM+0x46>
 a52:	84 30       	cpi	r24, 0x04	; 4
 a54:	d1 f4       	brne	.+52     	; 0xa8a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a56:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
 a5a:	8f 7d       	andi	r24, 0xDF	; 223
 a5c:	03 c0       	rjmp	.+6      	; 0xa64 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 a5e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
 a62:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a64:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
 a68:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 a6a:	84 b5       	in	r24, 0x24	; 36
 a6c:	8f 77       	andi	r24, 0x7F	; 127
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 a70:	84 b5       	in	r24, 0x24	; 36
 a72:	8f 7d       	andi	r24, 0xDF	; 223
 a74:	84 bd       	out	0x24, r24	; 36
 a76:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 a78:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7fe0b0>
 a7c:	8f 77       	andi	r24, 0x7F	; 127
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 a80:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7fe0b0>
 a84:	8f 7d       	andi	r24, 0xDF	; 223
 a86:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7fe0b0>
 a8a:	08 95       	ret

00000a8c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 a8c:	cf 93       	push	r28
 a8e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	fc 01       	movw	r30, r24
 a94:	e8 5b       	subi	r30, 0xB8	; 184
 a96:	ff 4f       	sbci	r31, 0xFF	; 255
 a98:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 a9a:	fc 01       	movw	r30, r24
 a9c:	e4 5a       	subi	r30, 0xA4	; 164
 a9e:	ff 4f       	sbci	r31, 0xFF	; 255
 aa0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 aa2:	88 23       	and	r24, r24
 aa4:	61 f1       	breq	.+88     	; 0xafe <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	88 0f       	add	r24, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	fc 01       	movw	r30, r24
 aae:	ec 57       	subi	r30, 0x7C	; 124
 ab0:	ff 4f       	sbci	r31, 0xFF	; 255
 ab2:	c5 91       	lpm	r28, Z+
 ab4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 ab6:	fc 01       	movw	r30, r24
 ab8:	e6 58       	subi	r30, 0x86	; 134
 aba:	ff 4f       	sbci	r31, 0xFF	; 255
 abc:	a5 91       	lpm	r26, Z+
 abe:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 ac0:	61 11       	cpse	r22, r1
 ac2:	09 c0       	rjmp	.+18     	; 0xad6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 ac4:	9f b7       	in	r25, 0x3f	; 63
                cli();
 ac6:	f8 94       	cli
		*reg &= ~bit;
 ac8:	88 81       	ld	r24, Y
 aca:	20 95       	com	r18
 acc:	82 23       	and	r24, r18
 ace:	88 83       	st	Y, r24
		*out &= ~bit;
 ad0:	ec 91       	ld	r30, X
 ad2:	2e 23       	and	r18, r30
 ad4:	0b c0       	rjmp	.+22     	; 0xaec <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 ad6:	62 30       	cpi	r22, 0x02	; 2
 ad8:	61 f4       	brne	.+24     	; 0xaf2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 ada:	9f b7       	in	r25, 0x3f	; 63
                cli();
 adc:	f8 94       	cli
		*reg &= ~bit;
 ade:	88 81       	ld	r24, Y
 ae0:	32 2f       	mov	r19, r18
 ae2:	30 95       	com	r19
 ae4:	83 23       	and	r24, r19
 ae6:	88 83       	st	Y, r24
		*out |= bit;
 ae8:	ec 91       	ld	r30, X
 aea:	2e 2b       	or	r18, r30
 aec:	2c 93       	st	X, r18
		SREG = oldSREG;
 aee:	9f bf       	out	0x3f, r25	; 63
 af0:	06 c0       	rjmp	.+12     	; 0xafe <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 af2:	8f b7       	in	r24, 0x3f	; 63
                cli();
 af4:	f8 94       	cli
		*reg |= bit;
 af6:	e8 81       	ld	r30, Y
 af8:	2e 2b       	or	r18, r30
 afa:	28 83       	st	Y, r18
		SREG = oldSREG;
 afc:	8f bf       	out	0x3f, r24	; 63
	}
}
 afe:	df 91       	pop	r29
 b00:	cf 91       	pop	r28
 b02:	08 95       	ret

00000b04 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 b04:	1f 93       	push	r17
 b06:	cf 93       	push	r28
 b08:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 b0a:	28 2f       	mov	r18, r24
 b0c:	30 e0       	ldi	r19, 0x00	; 0
 b0e:	f9 01       	movw	r30, r18
 b10:	ec 5c       	subi	r30, 0xCC	; 204
 b12:	ff 4f       	sbci	r31, 0xFF	; 255
 b14:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 b16:	f9 01       	movw	r30, r18
 b18:	e8 5b       	subi	r30, 0xB8	; 184
 b1a:	ff 4f       	sbci	r31, 0xFF	; 255
 b1c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 b1e:	f9 01       	movw	r30, r18
 b20:	e4 5a       	subi	r30, 0xA4	; 164
 b22:	ff 4f       	sbci	r31, 0xFF	; 255
 b24:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 b26:	cc 23       	and	r28, r28
 b28:	b9 f0       	breq	.+46     	; 0xb58 <digitalWrite+0x54>
 b2a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b2c:	81 11       	cpse	r24, r1
 b2e:	85 df       	rcall	.-246    	; 0xa3a <turnOffPWM>

	out = portOutputRegister(port);
 b30:	ec 2f       	mov	r30, r28
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	ee 0f       	add	r30, r30
 b36:	ff 1f       	adc	r31, r31
 b38:	e6 58       	subi	r30, 0x86	; 134
 b3a:	ff 4f       	sbci	r31, 0xFF	; 255
 b3c:	a5 91       	lpm	r26, Z+
 b3e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 b40:	9f b7       	in	r25, 0x3f	; 63
	cli();
 b42:	f8 94       	cli

	if (val == LOW) {
 b44:	11 11       	cpse	r17, r1
 b46:	04 c0       	rjmp	.+8      	; 0xb50 <digitalWrite+0x4c>
		*out &= ~bit;
 b48:	8c 91       	ld	r24, X
 b4a:	d0 95       	com	r29
 b4c:	d8 23       	and	r29, r24
 b4e:	02 c0       	rjmp	.+4      	; 0xb54 <digitalWrite+0x50>
	} else {
		*out |= bit;
 b50:	ec 91       	ld	r30, X
 b52:	de 2b       	or	r29, r30
 b54:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 b56:	9f bf       	out	0x3f, r25	; 63
}
 b58:	df 91       	pop	r29
 b5a:	cf 91       	pop	r28
 b5c:	1f 91       	pop	r17
 b5e:	08 95       	ret

00000b60 <digitalRead>:

int digitalRead(uint8_t pin)
{
 b60:	cf 93       	push	r28
 b62:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 b64:	28 2f       	mov	r18, r24
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	f9 01       	movw	r30, r18
 b6a:	ec 5c       	subi	r30, 0xCC	; 204
 b6c:	ff 4f       	sbci	r31, 0xFF	; 255
 b6e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 b70:	f9 01       	movw	r30, r18
 b72:	e8 5b       	subi	r30, 0xB8	; 184
 b74:	ff 4f       	sbci	r31, 0xFF	; 255
 b76:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 b78:	f9 01       	movw	r30, r18
 b7a:	e4 5a       	subi	r30, 0xA4	; 164
 b7c:	ff 4f       	sbci	r31, 0xFF	; 255
 b7e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 b80:	cc 23       	and	r28, r28
 b82:	89 f0       	breq	.+34     	; 0xba6 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b84:	81 11       	cpse	r24, r1
 b86:	59 df       	rcall	.-334    	; 0xa3a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 b88:	ec 2f       	mov	r30, r28
 b8a:	f0 e0       	ldi	r31, 0x00	; 0
 b8c:	ee 0f       	add	r30, r30
 b8e:	ff 1f       	adc	r31, r31
 b90:	e0 59       	subi	r30, 0x90	; 144
 b92:	ff 4f       	sbci	r31, 0xFF	; 255
 b94:	a5 91       	lpm	r26, Z+
 b96:	b4 91       	lpm	r27, Z
 b98:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 b9a:	ed 23       	and	r30, r29
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	21 f4       	brne	.+8      	; 0xbaa <digitalRead+0x4a>
 ba2:	80 e0       	ldi	r24, 0x00	; 0
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <digitalRead+0x4a>
 ba6:	80 e0       	ldi	r24, 0x00	; 0
 ba8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 baa:	df 91       	pop	r29
 bac:	cf 91       	pop	r28
 bae:	08 95       	ret

00000bb0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 bb0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 bb2:	91 8d       	ldd	r25, Z+25	; 0x19
 bb4:	22 8d       	ldd	r18, Z+26	; 0x1a
 bb6:	89 2f       	mov	r24, r25
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	80 5c       	subi	r24, 0xC0	; 192
 bbc:	9f 4f       	sbci	r25, 0xFF	; 255
 bbe:	82 1b       	sub	r24, r18
 bc0:	91 09       	sbc	r25, r1
}
 bc2:	8f 73       	andi	r24, 0x3F	; 63
 bc4:	99 27       	eor	r25, r25
 bc6:	08 95       	ret

00000bc8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 bc8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 bca:	91 8d       	ldd	r25, Z+25	; 0x19
 bcc:	82 8d       	ldd	r24, Z+26	; 0x1a
 bce:	98 17       	cp	r25, r24
 bd0:	31 f0       	breq	.+12     	; 0xbde <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 bd2:	82 8d       	ldd	r24, Z+26	; 0x1a
 bd4:	e8 0f       	add	r30, r24
 bd6:	f1 1d       	adc	r31, r1
 bd8:	85 8d       	ldd	r24, Z+29	; 0x1d
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 bde:	8f ef       	ldi	r24, 0xFF	; 255
 be0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 be2:	08 95       	ret

00000be4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 be4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 be6:	91 8d       	ldd	r25, Z+25	; 0x19
 be8:	82 8d       	ldd	r24, Z+26	; 0x1a
 bea:	98 17       	cp	r25, r24
 bec:	61 f0       	breq	.+24     	; 0xc06 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 bee:	82 8d       	ldd	r24, Z+26	; 0x1a
 bf0:	df 01       	movw	r26, r30
 bf2:	a8 0f       	add	r26, r24
 bf4:	b1 1d       	adc	r27, r1
 bf6:	5d 96       	adiw	r26, 0x1d	; 29
 bf8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 bfa:	92 8d       	ldd	r25, Z+26	; 0x1a
 bfc:	9f 5f       	subi	r25, 0xFF	; 255
 bfe:	9f 73       	andi	r25, 0x3F	; 63
 c00:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 c06:	8f ef       	ldi	r24, 0xFF	; 255
 c08:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 c0a:	08 95       	ret

00000c0c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 c0c:	fc 01       	movw	r30, r24
 c0e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
 c10:	44 8d       	ldd	r20, Z+28	; 0x1c
 c12:	25 2f       	mov	r18, r21
 c14:	30 e0       	ldi	r19, 0x00	; 0
 c16:	84 2f       	mov	r24, r20
 c18:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 c1a:	82 1b       	sub	r24, r18
 c1c:	93 0b       	sbc	r25, r19
 c1e:	54 17       	cp	r21, r20
 c20:	10 f0       	brcs	.+4      	; 0xc26 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 c22:	cf 96       	adiw	r24, 0x3f	; 63
 c24:	08 95       	ret
  return tail - head - 1;
 c26:	01 97       	sbiw	r24, 0x01	; 1
}
 c28:	08 95       	ret

00000c2a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 c2a:	8a e3       	ldi	r24, 0x3A	; 58
 c2c:	93 e0       	ldi	r25, 0x03	; 3
 c2e:	89 2b       	or	r24, r25
 c30:	39 f0       	breq	.+14     	; 0xc40 <_Z14serialEventRunv+0x16>
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	89 2b       	or	r24, r25
 c38:	19 f0       	breq	.+6      	; 0xc40 <_Z14serialEventRunv+0x16>
 c3a:	1c dd       	rcall	.-1480   	; 0x674 <_Z17Serial0_availablev>
 c3c:	81 11       	cpse	r24, r1
 c3e:	e0 c9       	rjmp	.-3136   	; 0x0 <__vectors>
 c40:	08 95       	ret

00000c42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 c42:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 c44:	84 8d       	ldd	r24, Z+28	; 0x1c
 c46:	df 01       	movw	r26, r30
 c48:	a8 0f       	add	r26, r24
 c4a:	b1 1d       	adc	r27, r1
 c4c:	a3 5a       	subi	r26, 0xA3	; 163
 c4e:	bf 4f       	sbci	r27, 0xFF	; 255
 c50:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 c52:	84 8d       	ldd	r24, Z+28	; 0x1c
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	01 96       	adiw	r24, 0x01	; 1
 c58:	8f 73       	andi	r24, 0x3F	; 63
 c5a:	99 27       	eor	r25, r25
 c5c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 c5e:	a6 89       	ldd	r26, Z+22	; 0x16
 c60:	b7 89       	ldd	r27, Z+23	; 0x17
 c62:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 c64:	a0 89       	ldd	r26, Z+16	; 0x10
 c66:	b1 89       	ldd	r27, Z+17	; 0x11
 c68:	8c 91       	ld	r24, X
 c6a:	83 70       	andi	r24, 0x03	; 3
 c6c:	80 64       	ori	r24, 0x40	; 64
 c6e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 c70:	93 8d       	ldd	r25, Z+27	; 0x1b
 c72:	84 8d       	ldd	r24, Z+28	; 0x1c
 c74:	98 13       	cpse	r25, r24
 c76:	06 c0       	rjmp	.+12     	; 0xc84 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 c78:	02 88       	ldd	r0, Z+18	; 0x12
 c7a:	f3 89       	ldd	r31, Z+19	; 0x13
 c7c:	e0 2d       	mov	r30, r0
 c7e:	80 81       	ld	r24, Z
 c80:	8f 7d       	andi	r24, 0xDF	; 223
 c82:	80 83       	st	Z, r24
 c84:	08 95       	ret

00000c86 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 c86:	ef 92       	push	r14
 c88:	ff 92       	push	r15
 c8a:	0f 93       	push	r16
 c8c:	1f 93       	push	r17
 c8e:	cf 93       	push	r28
 c90:	df 93       	push	r29
 c92:	ec 01       	movw	r28, r24
  _written = true;
 c94:	81 e0       	ldi	r24, 0x01	; 1
 c96:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 c98:	9b 8d       	ldd	r25, Y+27	; 0x1b
 c9a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 c9c:	98 13       	cpse	r25, r24
 c9e:	05 c0       	rjmp	.+10     	; 0xcaa <_ZN14HardwareSerial5writeEh+0x24>
 ca0:	e8 89       	ldd	r30, Y+16	; 0x10
 ca2:	f9 89       	ldd	r31, Y+17	; 0x11
 ca4:	80 81       	ld	r24, Z
 ca6:	85 fd       	sbrc	r24, 5
 ca8:	25 c0       	rjmp	.+74     	; 0xcf4 <_ZN14HardwareSerial5writeEh+0x6e>
 caa:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 cac:	0b 8d       	ldd	r16, Y+27	; 0x1b
 cae:	10 e0       	ldi	r17, 0x00	; 0
 cb0:	0f 5f       	subi	r16, 0xFF	; 255
 cb2:	1f 4f       	sbci	r17, 0xFF	; 255
 cb4:	0f 73       	andi	r16, 0x3F	; 63
 cb6:	11 27       	eor	r17, r17
 cb8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 cba:	8c 8d       	ldd	r24, Y+28	; 0x1c
 cbc:	e8 12       	cpse	r14, r24
 cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 cc0:	0f b6       	in	r0, 0x3f	; 63
 cc2:	07 fc       	sbrc	r0, 7
 cc4:	fa cf       	rjmp	.-12     	; 0xcba <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 cc6:	e8 89       	ldd	r30, Y+16	; 0x10
 cc8:	f9 89       	ldd	r31, Y+17	; 0x11
 cca:	80 81       	ld	r24, Z
 ccc:	85 ff       	sbrs	r24, 5
 cce:	f5 cf       	rjmp	.-22     	; 0xcba <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 cd0:	ce 01       	movw	r24, r28
 cd2:	b7 df       	rcall	.-146    	; 0xc42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 cd4:	f2 cf       	rjmp	.-28     	; 0xcba <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 cd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 cd8:	fe 01       	movw	r30, r28
 cda:	e8 0f       	add	r30, r24
 cdc:	f1 1d       	adc	r31, r1
 cde:	e3 5a       	subi	r30, 0xA3	; 163
 ce0:	ff 4f       	sbci	r31, 0xFF	; 255
 ce2:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 ce4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 ce6:	f8 94       	cli
    _tx_buffer_head = i;
 ce8:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 cea:	ea 89       	ldd	r30, Y+18	; 0x12
 cec:	fb 89       	ldd	r31, Y+19	; 0x13
 cee:	80 81       	ld	r24, Z
 cf0:	80 62       	ori	r24, 0x20	; 32
 cf2:	0a c0       	rjmp	.+20     	; 0xd08 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 cf4:	9f b7       	in	r25, 0x3f	; 63
 cf6:	f8 94       	cli
      *_udr = c;
 cf8:	ee 89       	ldd	r30, Y+22	; 0x16
 cfa:	ff 89       	ldd	r31, Y+23	; 0x17
 cfc:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 cfe:	e8 89       	ldd	r30, Y+16	; 0x10
 d00:	f9 89       	ldd	r31, Y+17	; 0x11
 d02:	80 81       	ld	r24, Z
 d04:	83 70       	andi	r24, 0x03	; 3
 d06:	80 64       	ori	r24, 0x40	; 64
 d08:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 d0a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
 d0c:	81 e0       	ldi	r24, 0x01	; 1
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	df 91       	pop	r29
 d12:	cf 91       	pop	r28
 d14:	1f 91       	pop	r17
 d16:	0f 91       	pop	r16
 d18:	ff 90       	pop	r15
 d1a:	ef 90       	pop	r14
 d1c:	08 95       	ret

00000d1e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 d1e:	cf 93       	push	r28
 d20:	df 93       	push	r29
 d22:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 d24:	88 8d       	ldd	r24, Y+24	; 0x18
 d26:	88 23       	and	r24, r24
 d28:	c1 f0       	breq	.+48     	; 0xd5a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 d2a:	ea 89       	ldd	r30, Y+18	; 0x12
 d2c:	fb 89       	ldd	r31, Y+19	; 0x13
 d2e:	80 81       	ld	r24, Z
 d30:	85 fd       	sbrc	r24, 5
 d32:	05 c0       	rjmp	.+10     	; 0xd3e <_ZN14HardwareSerial5flushEv+0x20>
 d34:	a8 89       	ldd	r26, Y+16	; 0x10
 d36:	b9 89       	ldd	r27, Y+17	; 0x11
 d38:	8c 91       	ld	r24, X
 d3a:	86 fd       	sbrc	r24, 6
 d3c:	0e c0       	rjmp	.+28     	; 0xd5a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 d3e:	0f b6       	in	r0, 0x3f	; 63
 d40:	07 fc       	sbrc	r0, 7
 d42:	f5 cf       	rjmp	.-22     	; 0xd2e <_ZN14HardwareSerial5flushEv+0x10>
 d44:	80 81       	ld	r24, Z
 d46:	85 ff       	sbrs	r24, 5
 d48:	f2 cf       	rjmp	.-28     	; 0xd2e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 d4a:	a8 89       	ldd	r26, Y+16	; 0x10
 d4c:	b9 89       	ldd	r27, Y+17	; 0x11
 d4e:	8c 91       	ld	r24, X
 d50:	85 ff       	sbrs	r24, 5
 d52:	ed cf       	rjmp	.-38     	; 0xd2e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 d54:	ce 01       	movw	r24, r28
 d56:	75 df       	rcall	.-278    	; 0xc42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 d58:	e8 cf       	rjmp	.-48     	; 0xd2a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 d5a:	df 91       	pop	r29
 d5c:	cf 91       	pop	r28
 d5e:	08 95       	ret

00000d60 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 d60:	08 95       	ret

00000d62 <__udivmodsi4>:
 d62:	a1 e2       	ldi	r26, 0x21	; 33
 d64:	1a 2e       	mov	r1, r26
 d66:	aa 1b       	sub	r26, r26
 d68:	bb 1b       	sub	r27, r27
 d6a:	fd 01       	movw	r30, r26
 d6c:	0d c0       	rjmp	.+26     	; 0xd88 <__udivmodsi4_ep>

00000d6e <__udivmodsi4_loop>:
 d6e:	aa 1f       	adc	r26, r26
 d70:	bb 1f       	adc	r27, r27
 d72:	ee 1f       	adc	r30, r30
 d74:	ff 1f       	adc	r31, r31
 d76:	a2 17       	cp	r26, r18
 d78:	b3 07       	cpc	r27, r19
 d7a:	e4 07       	cpc	r30, r20
 d7c:	f5 07       	cpc	r31, r21
 d7e:	20 f0       	brcs	.+8      	; 0xd88 <__udivmodsi4_ep>
 d80:	a2 1b       	sub	r26, r18
 d82:	b3 0b       	sbc	r27, r19
 d84:	e4 0b       	sbc	r30, r20
 d86:	f5 0b       	sbc	r31, r21

00000d88 <__udivmodsi4_ep>:
 d88:	66 1f       	adc	r22, r22
 d8a:	77 1f       	adc	r23, r23
 d8c:	88 1f       	adc	r24, r24
 d8e:	99 1f       	adc	r25, r25
 d90:	1a 94       	dec	r1
 d92:	69 f7       	brne	.-38     	; 0xd6e <__udivmodsi4_loop>
 d94:	60 95       	com	r22
 d96:	70 95       	com	r23
 d98:	80 95       	com	r24
 d9a:	90 95       	com	r25
 d9c:	9b 01       	movw	r18, r22
 d9e:	ac 01       	movw	r20, r24
 da0:	bd 01       	movw	r22, r26
 da2:	cf 01       	movw	r24, r30
 da4:	08 95       	ret

00000da6 <__tablejump2__>:
 da6:	ee 0f       	add	r30, r30
 da8:	ff 1f       	adc	r31, r31
 daa:	05 90       	lpm	r0, Z+
 dac:	f4 91       	lpm	r31, Z
 dae:	e0 2d       	mov	r30, r0
 db0:	09 94       	ijmp

00000db2 <_exit>:
 db2:	f8 94       	cli

00000db4 <__stop_program>:
 db4:	ff cf       	rjmp	.-2      	; 0xdb4 <__stop_program>
